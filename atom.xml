<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhailiangs&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-07-07T03:08:14.956Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhailiangs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>树莓派 + V2Ray 配置路由器科学上网</title>
    <link href="http://yoursite.com/2022/07/07/tproxy-with-v2ray-on-rpi/"/>
    <id>http://yoursite.com/2022/07/07/tproxy-with-v2ray-on-rpi/</id>
    <published>2022-07-07T02:57:59.416Z</published>
    <updated>2022-07-07T03:08:14.956Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是记录如何在将树莓派作为旁路由，配合 V2Ray，搭建透明代理，以实现局域网内设备的无感科学上网。</p><ol><li><p>刷写系统<br>我使用的是 Ubuntu Server 20.04，当然，其他系统也可以。刷写工具为 Win32DiskImager。</p></li><li><p>更改 APT 软件源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt edit-sources</span><br></pre></td></tr></table></figure></li></ol><p>这里选择你喜欢的编辑器即可，我选择的是 Vim。</p><p>如果你也一样，可以像我接下来这样替换软件源，此处我选择清华源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/ports.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g</span><br></pre></td></tr></table></figure></p><p>修改后保存并退出即可。之后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure></p><p>更新并升级。</p><ol start="3"><li>配置内核、网络（静态地址）<br>新版 Ubuntu 默认使用 Netplan + Systemd-networkd 管理网络，而 Netplan 文件使用了可读性高且人性化的 YAML 格式文件。</li></ol><p>vim /etc/netplan/50-cloud-init.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        eth0:</span><br><span class="line">            dhcp4: false</span><br><span class="line">            dhcp6: false</span><br><span class="line">            link-local: [] # 停止自动获取 IP 地址</span><br><span class="line">            accept-ra: false # 同时不接受 IPv6 地址的广播</span><br><span class="line">            # optional: true # 值为「真」时，开机时不等待获取到网络。这里作为路由器，我就注释掉了</span><br><span class="line">            addresses:</span><br><span class="line">                - 192.168.0.5/24 # IP 地址，注意有子网长度，相当于 IP 地址 + 子网掩码</span><br><span class="line">            gateway4: 192.168.0.1 # 网关地址</span><br><span class="line">            nameservers:</span><br><span class="line">                addresses:</span><br><span class="line">                    - 192.168.0.1 # DNS 服务器地址</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure></p><p>保存退出后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netplan apply</span><br></pre></td></tr></table></figure></p><p>这里由于配置了修改了 IP，如果使用 SSH 连接的话，将会断线，重连即可。</p><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></table></figure></p><p>可以查看本机 IP 地址。</p><p>编辑 /etc/sysctl.conf 配置包转发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment the next line to enable packet forwarding for IPv4</span><br><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sysctl -p</span><br></pre></td></tr></table></figure><p>运行以上指令后，转发即可生效。</p><ol start="4"><li>安装 V2Ray<br>使用官方脚本即可<em>（实话说这域名不错）</em>。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://install.direct/go.sh</span><br><span class="line">bash go.sh</span><br></pre></td></tr></table></figure></li></ol><p>然而由于安装时脚本需要从 GitHub 上下载最新的程序文件，所以速度很慢。所以需要通过本机代理下载或者在其他设备上下载后进行本地安装。</p><p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># bash go.sh -h</span><br></pre></td></tr></table></figure></p><p>后可以看到以下输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./install-release.sh [-h] [-c] [--remove] [-p proxy] [-f] [--version vx.y.z] [-l file]</span><br><span class="line">  -h, --help            Show help</span><br><span class="line">  -p, --proxy           To download through a proxy server, use -p socks5://127.0.0.1:1080 or -p http://127.0.0.1:3128 etc</span><br><span class="line">  -f, --force           Force install</span><br><span class="line">      --version         Install a particular version, use --version v3.15</span><br><span class="line">  -l, --local           Install from a local file</span><br><span class="line">      --remove          Remove installed V2Ray</span><br><span class="line">  -c, --check           Check for update</span><br></pre></td></tr></table></figure></p><p>这里我通过一台境外 VPS 下载安装包，之后通过 scp 指令传输到本地进行安装。具体步骤请自行查询。注意手动从 GitHub 上进行下载时要选对架构，实在分不清可以先运行一下脚本，这是会输出下载链接，然后结束运行，复制链接，下载。</p><p>安装过程中脚本会自动修复依赖和创建 Systemd 单元。</p><ol start="5"><li>配置 V2Ray<br>接下来我们就要进入重头戏：配置 V2Ray 透明代理。我的思路是由 V2Ray 的 Dokodemo door（任意门）协议接收除 53 端口的 UDP 和特殊地址以外的流量，之后通过内置的路由功能进行分流，分流方式为代理被墙域名和 IP 列表，其他全部直连。至于 53 端口的 UDP 流量，也就是 DNS 查询，通过一个 DNS 分流器进行分流，以防污染。</li></ol><p>好，思路解释完毕，下面开始实践。首先我们编辑 V2Ray 配置文件：/etc/v2ray/config.json。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;error&quot;: &quot;/var/log/v2ray/error.log&quot;, // 错误日志目录</span><br><span class="line">    &quot;access&quot;: &quot;/var/log/v2ray/access.log&quot;, // 访问日志目录</span><br><span class="line">    &quot;loglevel&quot;: &quot;error&quot; // 错误日志级别</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;inbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;protocol&quot;: &quot;dokodemo-door&quot;, // 透明代理流量入口</span><br><span class="line">      &quot;port&quot;: 12345, // 端口，可自定义</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;network&quot;: &quot;tcp,udp&quot;,</span><br><span class="line">        &quot;followRedirect&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;sniffing&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true,</span><br><span class="line">        &quot;destOverride&quot;: [</span><br><span class="line">          &quot;http&quot;,</span><br><span class="line">          &quot;tls&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;streamSettings&quot;: &#123;</span><br><span class="line">        &quot;sockopt&quot;: &#123;</span><br><span class="line">          &quot;tproxy&quot;: &quot;tproxy&quot; // 使用 TPROXY 方式实现透明代理，相应的还有 REDIRECT 方式</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;port&quot;: 1080,</span><br><span class="line">      &quot;protocol&quot;: &quot;socks&quot;, // SOCKS 代理，可选，方便测试</span><br><span class="line">      &quot;sniffing&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true,</span><br><span class="line">        &quot;destOverride&quot;: [</span><br><span class="line">          &quot;http&quot;,</span><br><span class="line">          &quot;tls&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;auth&quot;: &quot;noauth&quot;,</span><br><span class="line">        &quot;udp&quot;: true,</span><br><span class="line">        &quot;ip&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;port&quot;: 8081,</span><br><span class="line">      &quot;protocol&quot;: &quot;http&quot;, // HTTP 代理，可选，想用、会用可以保留</span><br><span class="line">      &quot;sniffing&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true,</span><br><span class="line">        &quot;destOverride&quot;: [</span><br><span class="line">          &quot;http&quot;,</span><br><span class="line">          &quot;tls&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;outbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;tag&quot;: &quot;direct&quot;, // 出口流量直连标签</span><br><span class="line">      &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="line">      &quot;streamSettings&quot;: &#123;</span><br><span class="line">        &quot;sockopt&quot;: &#123;</span><br><span class="line">          &quot;mark&quot;: 2 // 一个可爱的小标记，数字自定义（可能有范围，使用「2」即可），后面能用到</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;tag&quot;: &quot;proxy&quot;, // 出口流量代理标签</span><br><span class="line">      &quot;protocol&quot;: &quot;vmess&quot;, // V2Ray 服务端信息配置</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;vnext&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;address&quot;: &quot;服务器地址或域名&quot;,</span><br><span class="line">            &quot;port&quot;: 端口,</span><br><span class="line">            &quot;users&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;id&quot;: &quot;UUID&quot;,</span><br><span class="line">                &quot;alterId&quot;: 4,</span><br><span class="line">                &quot;security&quot;: &quot;auto&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;streamSettings&quot;: &#123;</span><br><span class="line">        &quot;network&quot;: &quot;ws&quot;, // WebSocket 传输方式配置，请根据实际情况进行修改</span><br><span class="line">        &quot;wsSettings&quot;: &#123;</span><br><span class="line">          &quot;path&quot;: &quot;路径&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;security&quot;: &quot;tls&quot;,</span><br><span class="line">        &quot;sockopt&quot;: &#123;</span><br><span class="line">          &quot;mark&quot;: 2 // 和上面一样可爱的小标记，两者需相同，后面能用到</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;tag&quot;: &quot;block&quot;, // 出口流量丢弃标签</span><br><span class="line">      &quot;protocol&quot;: &quot;blackhole&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;response&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;http&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;routing&quot;: &#123;</span><br><span class="line">    &quot;domainStrategy&quot;: &quot;IPIfNonMatch&quot;, // 此方式匹配最为全面</span><br><span class="line">    &quot;rules&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">        &quot;outboundTag&quot;: &quot;proxy&quot;,</span><br><span class="line">        &quot;ip&quot;: [</span><br><span class="line">          // 需要远程解析的 DNS 服务器地址，单独列出，方便维护，与后面 DNS 分流器中的地址相同</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">        &quot;outboundTag&quot;: &quot;block&quot;,</span><br><span class="line">        &quot;domain&quot;: [</span><br><span class="line">          // 一些想要禁止访问的域名，如广告</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">        &quot;outboundTag&quot;: &quot;block&quot;,</span><br><span class="line">        &quot;ip&quot;: [</span><br><span class="line">          // 一些想要禁止的 IP，目的同上</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">        &quot;outboundTag&quot;: &quot;proxy&quot;,</span><br><span class="line">        &quot;domain&quot;: [</span><br><span class="line">          // 一些想要代理的域名，如被墙的域名</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">        &quot;outboundTag&quot;: &quot;proxy&quot;,</span><br><span class="line">        &quot;ip&quot;: [</span><br><span class="line">          // 一些想要代理的 IP，目的同上（Telegram 就需要指定 IP 走代理）</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件虽然很长，但是配合注释来看比较好理解，请根据实际情况进行修改。需要注意的是，如果在 VSCode、Vim 等编辑器中修改本文件，可能会对有注释的地方报错，这是因为 JSON 格式的文件理论上不支持注释，然而 V2Ray 程序却支持，所以不删除注释也不会影响正常使用。</p><p>另外，上面的配置最后有几个包含「一些想要」注释开头的数组（即中括号「[]」内），其中的内容需要按照实际情况进行修改，这里我分享一下自用的规则：config_routing.json，下载后补充到上面配置文件中即可。这里需要注意的是，我分享的规则中的 Block 部分由于过于强力，可能会导致一些网站无法正常使用（已发现并修改：B 站登录界面、优酷播放界面），所以介意的话可以删除这一部分。如果想要使用，还要解决这个问题，请在网页功能无法正常使用时打开浏览器的开发人员工具，里面应该会提示某一域名（IP）无法访问的错误，之后在配置中查找此域名（IP）并将其删除即可。</p><p>如果以上步骤都做好了，那么就可以保存退出了。</p><p>现在运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/v2ray/v2ray -config /etc/v2ray/config.json -test</span><br></pre></td></tr></table></figure></p><p>如果无报错，出现 Configuration OK. 则说明配置文件表面上没有错误。</p><p>最后，需要修改一下 /etc/systemd/system/v2ray.service 文件，以免运行时出现错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">CapabilityBoundingSet=CAP_NET_BIND_SERVICE CAP_NET_RAW CAP_NET_ADMIN</span><br><span class="line"># 4.23.1 需要在 「CapabilityBoundingSet」 的最后添加 「CAP_NET_ADMIN」，否则透明代理无法正常使用</span><br><span class="line">LimitNPROC=500</span><br><span class="line">LimitNOFILE=1000000</span><br><span class="line"># 修改后解决日志中出现非常多「too many open files」的问题</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>这里有一个可选的步骤，如果细心查看配置的话，可能会在路由规则中发现与 geosite:category-ads-all 类似的奇怪字样，这些其实是 V2Ray 中自带的域名（IP）规则，但是此规则文件只能随着 V2Ray 版本更新而更新，所以如果有新的域名出现，不会及时进行补充（虽然内置规则加上配置中的其他规则足够了）。不过有人利用 GitHub Action 每天自动生成此规则文件，其中除了官方自带的地址，又增加了一些地址，以便更好的满足使用者的需求。</p><p>使用方法很简单：用 geoip.dat 和 geosite.dat 两个文件替换 /usr/bin/v2ray 目录下的同名文件即可。</p><p>最后重启 V2Ray。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl restart v2ray</span><br></pre></td></tr></table></figure></p><p>之后可以使用 cURL 测试配置是否正确（所以建议添加 SOCKS 代理以便测试）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -x socks5h://127.0.0.1:1080 google.com</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;301 Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF=&quot;http://www.google.com/&quot;&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></pre></td></tr></table></figure><p>如出现问题，请检查配置和日志文件（可能需要调整错误日志级别以获取更多信息）。</p><ol start="6"><li>配置 DNS 服务器（Telescope DNS 分流器）<br>Telescope DNS 是一位大佬用 Go 语言开发的 DNS 分流器，在这里使用非常合适，大家觉得好用可以去给项目一个 Star。</li></ol><p>安装与配置 Systemd 单元的教程在项目主页上面都有，这里不作过多讲解。</p><p>如果已经安装好了，先不要着急启动。</p><p>首先，我们修改 Telescope DNS 的配置文件：/etc/ts-dns/ts-dns.toml。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Telescope DNS Configure File</span><br><span class="line"># https://github.com/wolf-joe/ts-dns</span><br><span class="line"></span><br><span class="line">listen = &quot;:53&quot;  # 监听端口</span><br><span class="line">gfwlist = &quot;gfwlist.txt&quot;  # gfwlist文件路径，release包中已预下载。官方地址：https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</span><br><span class="line">gfwlist_b64 = true  # 是否使用base64解码gfwlist文件，默认为true</span><br><span class="line">cnip = &quot;cnip.txt&quot;  # 中国ip网段列表，用于辅助域名分组</span><br><span class="line">disable_ipv6 = true  # 禁用IPv6地址解析，默认为false</span><br><span class="line"></span><br><span class="line">hosts_files = [&quot;/etc/hosts&quot;]  # hosts文件路径，支持多hosts</span><br><span class="line">[hosts] # 自定义域名映射</span><br><span class="line">&quot;cloudflare-dns.com&quot; = &quot;1.0.0.1&quot;  # 防止下文提到的DoH回环解析，此处地址与 V2Ray 路由规则中的地址相同</span><br><span class="line">&quot;dns.google&quot; = &quot;8.8.8.8&quot;</span><br><span class="line">&quot;dns.adguard.com&quot; = &quot;176.103.130.130&quot;</span><br><span class="line">&quot;dns.quad9.net&quot; = &quot;9.9.9.9&quot;</span><br><span class="line"></span><br><span class="line">[query_log]</span><br><span class="line">file = &quot;&quot;  # dns请求日志文件，值为/dev/null时不记录，值为空时记录到stdout</span><br><span class="line">ignore_qtypes = [&quot;DNSKEY&quot;, &quot;NS&quot;]  # 不记录指定类型的dns请求，默认为空</span><br><span class="line">ignore_cache = true  # 不记录命中缓存的dns请求，默认为false</span><br><span class="line">ignore_hosts = true  # 不记录命中hosts的dns请求，默认为false</span><br><span class="line"></span><br><span class="line">[cache]  # dns缓存配置</span><br><span class="line">size = 4096  # 缓存大小，为负数时禁用缓存</span><br><span class="line">min_ttl = 60  # 最小ttl，单位为秒</span><br><span class="line">max_ttl = 86400  # 最大ttl，单位为秒</span><br><span class="line"></span><br><span class="line">[groups] # 对域名进行分组</span><br><span class="line">  [groups.clean]  # 必选分组，默认域名所在分组</span><br><span class="line">  dns = [&quot;223.5.5.5&quot;, &quot;114.114.114.114&quot;]  # DNS服务器列表，默认使用53端口</span><br><span class="line">  concurrent = true  # 并发请求dns服务器列表</span><br><span class="line"></span><br><span class="line">  [groups.dirty]  # 必选分组，匹配GFWList的域名会归类到该组</span><br><span class="line">  # 警告：如果本机的dns指向ts-dns自身，且DoH地址中的域名被归类到该组，则会出现回环解析的情况，此时需要在上面的hosts中指定对应IP</span><br><span class="line">  doh = [&quot;https://dns.quad9.net/dns-query&quot;, &quot;https://dns.adguard.com/dns-query&quot;, &quot;https://cloudflare-dns.com/dns-query&quot;, &quot;https://dns.google/dns-query&quot;]  # dns over https服务器，由于分流到此处的域名大多被墙，需要通过代理访问，所以选择 DNS 远程解析以获取最佳速度</span><br><span class="line">  concurrent = true</span><br></pre></td></tr></table></figure></p><p>需要注意的是，如果系统使用了 Systemd-resolved 或其他监听 53 端口的 DNS 解析服务，需要将其停止，否则 Telescope DNS 无法启动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl stop systemd-resolved</span><br><span class="line"># systemctl disable systemd-resolved</span><br></pre></td></tr></table></figure></p><p>之后就可以开启 Telescope DNS 并设置自启。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start ts-dns</span><br><span class="line"># systemctl enable ts-dns</span><br></pre></td></tr></table></figure></p><p>再之后需要修改 /etc/netplan/50-cloud-init.yaml 和 /etc/resolv.conf。建议删除原有的 resolv.conf 文件并重新创建。</p><p>vim /etc/netplan/50-cloud-init.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        eth0:</span><br><span class="line">            dhcp4: false</span><br><span class="line">            dhcp6: false</span><br><span class="line">            link-local: [] # 停止自动获取 IP 地址</span><br><span class="line">            accept-ra: false # 同时不接受 IPv6 地址的广播</span><br><span class="line">            # optional: true # 值为「真」时，开机时不等待获取到网络。这里作为路由器，我就注释掉了</span><br><span class="line">            addresses:</span><br><span class="line">                - 192.168.0.5/24 # IP 地址，注意有子网长度，相当于 IP 地址 + 子网掩码</span><br><span class="line">            gateway4: 192.168.0.1 # 网关地址</span><br><span class="line">            # nameservers:</span><br><span class="line">                # addresses:</span><br><span class="line">                    # - 192.168.0.1 # DNS 服务器地址</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># netplan apply</span><br></pre></td></tr></table></figure><p>rm /etc/resolv.conf<br>vim /etc/resolv.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 127.0.0.1</span><br><span class="line">options edns0</span><br></pre></td></tr></table></figure></p><p>配置完成后，可以使用 dig 或 nslookup 指令检测 DNS 解析是否正常。如出现问题，可以查看日志获取更多信息。</p><p>另外，如果执行命令出现 sudo: unable to resolve host xxx: Temporary failure in name resolution，可以在 /etc/hosts 中将主机名，也就是这里的 xxx 添加到 127.0.0.1 之后。</p><ol start="7"><li>配置 iptables<br>iptables 的配置是最关键的一步，只有这里配置完成后，透明代理才能正常使用，少或多一条规则都可能引起很多问题。以下所有指令都需要管理员权限运行。</li></ol><p>配置策略路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip rule add fwmark 1 table 100 # 一个不可爱的小标记「1」，理论自定义，其他未测试</span><br><span class="line">ip route add local default dev lo table 100</span><br></pre></td></tr></table></figure></p><p>配置防火墙：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">iptables -t mangle -N V2RAY</span><br><span class="line">iptables -t mangle -A V2RAY -d 0.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 100.64.0.0/10 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 127.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 192.0.0.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 192.0.2.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 192.88.99.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 192.168.0.0/16 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 198.18.0.0/15 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 198.51.100.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 203.0.113.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 240.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 255.255.255.255/32 -j RETURN # 以上均为特殊地址，直连</span><br><span class="line">iptables -t mangle -A V2RAY -p udp --dport 53 -j RETURN # 国内域名查询，直连</span><br><span class="line">iptables -t mangle -A V2RAY -p tcp -j TPROXY --on-port 12345 --tproxy-mark 1</span><br><span class="line">iptables -t mangle -A V2RAY -p udp -j TPROXY --on-port 12345 --tproxy-mark 1 </span><br><span class="line"># 代理需要加一个不可爱的标记</span><br><span class="line">iptables -t mangle -A PREROUTING -j V2RAY</span><br><span class="line"></span><br><span class="line">iptables -t mangle -N V2RAY_MARK # 本机代理</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 0.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 100.64.0.0/10 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 192.0.0.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 192.0.2.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 192.88.99.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 192.168.0.0/16 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 198.18.0.0/15 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 198.51.100.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 203.0.113.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 240.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -d 255.255.255.255/32 -j RETURN # 除本机外，其他直连</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -p udp --dport 53 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -j RETURN -m mark --mark 2 # 打一个可爱的标记</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -p tcp -j MARK --set-mark 1 # 同样需要不可爱的标记</span><br><span class="line">iptables -t mangle -A V2RAY_MARK -p udp -j MARK --set-mark 1</span><br><span class="line">iptables -t mangle -A OUTPUT -j V2RAY_MARK</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ lsmod | grep TPROXY</span><br><span class="line">…</span><br><span class="line">xt_TPROXY              20480  2</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>如未出现此模块，说明系统未自动加载，需要手动设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># modprobe xt_TPROXY</span><br></pre></td></tr></table></figure><p>之后编辑 /etc/modules 设置开机自动加载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">…</span><br><span class="line">xt_TPROXY</span><br></pre></td></tr></table></figure></p><p>保存并退出即可。</p><p>执行上述命令之后，理论上应该成功了，同样可以使用 cURL 进行测试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl google.com</span><br></pre></td></tr></table></figure></p><p>出现和上文中一样的结果，说明没有问题了。现在只需将局域网内其他设备的网关和 DNS 服务器换成透明代理设备的 IP 即可。如果没有配置成功，那么就再一次阅读上文，检查配置，以及配合搜索引擎解决问题，实在不行可以请求大佬提供帮助。</p><p>不过呢，由于最后输入的一大串指令只是临时生效，重启后就需要重新配置，所有我们需要将其保存下来，并编写 Systemd 单元以方便使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir /etc/iptables</span><br><span class="line"># iptables-save -f /etc/iptables/v2tproxy.rules</span><br><span class="line"># vim /etc/systemd/system/v2tproxy.service</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Transparent proxy configurations for V2Ray</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/sbin/ip rule add fwmark 1 table 100 ; /sbin/ip route add local default dev lo table 100 ; /sbin/iptables-restore /etc/iptables/v2tproxy.rules</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"># systemctl enable v2tproxy</span><br></pre></td></tr></table></figure><p>至此，一切都大功告成了。</p><p>原文链接:<a href="https://moecm.com/tproxy-with-v2ray-on-rpi/" target="_blank" rel="noopener">https://moecm.com/tproxy-with-v2ray-on-rpi/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章主要是记录如何在将树莓派作为旁路由，配合 V2Ray，搭建透明代理，以实现局域网内设备的无感科学上网。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;刷写系统&lt;br&gt;我使用的是 Ubuntu Server 20.04，当然，其他系统也可以。刷写工具为 Win32DiskImage
      
    
    </summary>
    
      <category term="技术教程" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="V2Ray" scheme="http://yoursite.com/tags/V2Ray/"/>
    
      <category term="树莓派" scheme="http://yoursite.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>torrc配置项 HTTPTunnelPort</title>
    <link href="http://yoursite.com/2022/07/05/torrc-HTTPTunnelPort/"/>
    <id>http://yoursite.com/2022/07/05/torrc-HTTPTunnelPort/</id>
    <published>2022-07-05T06:44:56.844Z</published>
    <updated>2022-07-05T06:44:56.922Z</updated>
    
    <content type="html"><![CDATA[<p>新版本的Tor提供了一个http代理端口的配置项：</p><p>vi /etc/tor/torrc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTPTunnelPort 1081</span><br></pre></td></tr></table></figure></p><p>这样就不需要通过第三方软件吧socks转换成http了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新版本的Tor提供了一个http代理端口的配置项：&lt;/p&gt;
&lt;p&gt;vi /etc/tor/torrc&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Tor" scheme="http://yoursite.com/tags/Tor/"/>
    
  </entry>
  
  <entry>
    <title>组合索引</title>
    <link href="http://yoursite.com/2022/06/29/db-index/"/>
    <id>http://yoursite.com/2022/06/29/db-index/</id>
    <published>2022-06-29T06:10:23.404Z</published>
    <updated>2022-06-29T06:33:51.184Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们看看组合索引的与单列索引的区别：</p><h2 id="一-为什么要使用联合索引"><a href="#一-为什么要使用联合索引" class="headerlink" title="一.为什么要使用联合索引"></a>一.为什么要使用联合索引</h2><ol><li><p>减少开销<br>建一个联合索引(col1,col2,col3)，实际相当于建了(col1),(col1,col2),(col1,col2,col3)三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用联合索引会大大的减少开销！</p></li><li><p>覆盖索引<br>对联合索引(col1,col2,col3)，如果有如下的sql: select col1,col2,col3 from test where col1=1 and col2=2。那么MySQL可以直接通过遍历索引取得数据，而无需回表，这减少了很多的随机io操作。减少io操作，特别的随机io其实是dba主要的优化策略。所以，在真正的实际应用中，覆盖索引是主要的提升性能的优化手段之一。</p></li><li><p>效率高<br>索引列越多，通过索引筛选出的数据越少。有1000W条数据的表，有如下sql:select from table where col1=1 and col2=2 and col3=3,假设假设每个条件可以筛选出10%的数据，如果只有单值索引，那么通过该索引能筛选出1000W*10%=100w条数据，然后再回表从100w条数据中找到符合col2=2 and col3= 3的数据，然后再排序，再分页；如果是联合索引，通过索引筛选出1000w*10%*10%*10%=1w，效率提升可想而知!</p></li></ol><h2 id="二-组合索引如何使用"><a href="#二-组合索引如何使用" class="headerlink" title="二.组合索引如何使用"></a>二.组合索引如何使用</h2><p>最左原则</p><p>例如组合索引（a,b,c），组合索引的生效原则是</p><p>从前往后依次使用生效，如果中间某个索引没有使用，那么断点前面的索引部分起作用，断点后面的索引没有起作用；</p><p>对于组合索引:Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index (a,b,c). 可以支持a | a,b| a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。</p><p>两个或更多个列上的索引被称作复合索引。<br>利用索引中的附加列，您可以缩小搜索的范围，但使用一个具有两列的索引 不同于使用两个单独的索引。复合索引的结构与电话簿类似，人名由姓和名构成，电话簿首先按姓氏对进行排序，然后按名字对有相同姓氏的人进行排序。如果您知 道姓，电话簿将非常有用；如果您知道姓和名，电话簿则更为有用，但如果您只知道名不姓，电话簿将没有用处。<br>所以说创建复合索引时，应该仔细考虑列的顺序。对索引中的所有列执行搜索或仅对前几列执行搜索时，复合索引非常有用；仅对后面的任意列执行搜索时，复合索引则没有用处。</p><p>原文链接：<a href="https://blog.csdn.net/qq_46661297/article/details/106226732" target="_blank" rel="noopener">https://blog.csdn.net/qq_46661297/article/details/106226732</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先我们看看组合索引的与单列索引的区别：&lt;/p&gt;
&lt;h2 id=&quot;一-为什么要使用联合索引&quot;&gt;&lt;a href=&quot;#一-为什么要使用联合索引&quot; class=&quot;headerlink&quot; title=&quot;一.为什么要使用联合索引&quot;&gt;&lt;/a&gt;一.为什么要使用联合索引&lt;/h2&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="索引" scheme="http://yoursite.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>WordPress 创建自定义 URL 页面模板</title>
    <link href="http://yoursite.com/2022/06/29/wordpress-loadcustom-template/"/>
    <id>http://yoursite.com/2022/06/29/wordpress-loadcustom-template/</id>
    <published>2022-06-29T06:06:06.968Z</published>
    <updated>2022-06-29T06:07:54.202Z</updated>
    
    <content type="html"><![CDATA[<p>WordPress 创建模板的其实都非常的简单，而 WordPress 添加自定义页面一般有两种方法，一种是使用自定义模板，另外一种是使用 template_redirect 动作钩子来实现自定义页面。这也是子凡最近在开发博客导航中屡试不爽的一个功能，其中主要就是为了完成博客导航中 URL 的一个统一及规范，所以这就成了最好的一个方法了。</p><p>WordPress 自定义创建页面模板其实非常的简单，但是也比较的有局限性，因为 WordPress 在 page 页面类型中的 url 是不支持同名存在的，所以一旦与分类目录活着标签别名相同后，自定义固定链接使用文章名的链接就会出现错误，这也使得不能规范博客导航中的 URL 链接，所以这就成了子凡在开发博客导航中一直纠结的一个梗，所以最后不得不弃用 WordPress 自定义模板的这个功能。</p><p>template_redirect 动作钩子很有用，因为它是 WordPress 知道用户正在浏览的页面的关键。它在特定的页面选择 theme template 之前执行。在只在网站的前端触发，并不在管理员页面触发。直接调用 WordPress 的 API. 来解决这个问题。</p><p>老规矩，在当前主题 functions.php 中添加一下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//自定义页面模板</span><br><span class="line">function loadCustomTemplate($template) &#123;</span><br><span class="line">    global $wp_query;</span><br><span class="line">    if(!file_exists($template))return;</span><br><span class="line">    $wp_query-&gt;is_page = true;</span><br><span class="line">    $wp_query-&gt;is_single = false;</span><br><span class="line">    $wp_query-&gt;is_home = false;</span><br><span class="line">    $wp_query-&gt;comments = false;</span><br><span class="line">    // if we have a 404 status</span><br><span class="line">    if ($wp_query-&gt;is_404) &#123;</span><br><span class="line">        // set status of 404 to false</span><br><span class="line">        unset($wp_query-&gt;query[&quot;error&quot;]);</span><br><span class="line">        $wp_query-&gt;query_vars[&quot;error&quot;]=&quot;&quot;;</span><br><span class="line">        $wp_query-&gt;is_404=false;</span><br><span class="line">    &#125;</span><br><span class="line">    // change the header to 200 OK</span><br><span class="line">    header(&quot;HTTP/1.1 200 OK&quot;);</span><br><span class="line">    //load our template</span><br><span class="line">    include($template);</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">function templateRedirect() &#123;</span><br><span class="line">    $basename = basename($_SERVER[&apos;REQUEST_URI&apos;], &apos;?&apos; . $_SERVER[&apos;QUERY_STRING&apos;]);</span><br><span class="line">    loadCustomTemplate(TEMPLATEPATH.&apos;/blogs/&apos;.&quot;/$basename.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line">add_action(&apos;template_redirect&apos;, &apos;templateRedirect&apos;);</span><br></pre></td></tr></table></figure><p>这样就实现了 WordPress 查找主题文件夹下/blogs 文件夹下的 php 文件，并且将相匹配的 URL 请求转交给对应的 php 文件来处理的效果，与此同时，这个 php 文件还保持了对 WordPress API 的调用，因此留给我们的空间非常大。</p><p>如果我们需要自定义某个页面链接的模板，就需要在主题文件夹下的/blogs 目录创建一个 xxx.php 的 php 文件。这里页面的内容子凡就不提供代码示例了。</p><p>那么最后我们就只需要输入 domain.com/xxx 就能显示这个 xxx.php 的文件内容了，并且 xxx.php 这个文件是支持所有 WordPress 函数的，具有主题的框架和 CSS 样式，非常方便好用。</p><p>原文链接：<a href="https://zhangzifan.com/wordpress-template-redirect.html" target="_blank" rel="noopener">https://zhangzifan.com/wordpress-template-redirect.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;WordPress 创建模板的其实都非常的简单，而 WordPress 添加自定义页面一般有两种方法，一种是使用自定义模板，另外一种是使用 template_redirect 动作钩子来实现自定义页面。这也是子凡最近在开发博客导航中屡试不爽的一个功能，其中主要就是为了完成博
      
    
    </summary>
    
      <category term="WordPress" scheme="http://yoursite.com/categories/WordPress/"/>
    
    
      <category term="WordPress" scheme="http://yoursite.com/tags/WordPress/"/>
    
      <category term="Template" scheme="http://yoursite.com/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>WordPress 过滤钩子（Filter）基础详解</title>
    <link href="http://yoursite.com/2022/06/29/wordpress-filter/"/>
    <id>http://yoursite.com/2022/06/29/wordpress-filter/</id>
    <published>2022-06-29T06:03:52.030Z</published>
    <updated>2022-06-29T06:05:13.060Z</updated>
    
    <content type="html"><![CDATA[<p>WordPress 过滤钩子（filters）——我们可以扩展 WordPress 的最好方法之一。这个特性的基础就是钩子（hooks）—— WordPress的过滤（filters）和动作（actions）钩子。没有它们，我们就无法利用 WordPress 的可扩展性的优势。</p><h2 id="什么是-WordPress-过滤钩子（Filter）"><a href="#什么是-WordPress-过滤钩子（Filter）" class="headerlink" title="什么是 WordPress 过滤钩子（Filter）"></a>什么是 WordPress 过滤钩子（Filter）</h2><p>在 WordPress 官方开发文档里面，过滤钩子（filter）是这样定义的：</p><p>过滤钩子是一类函数，WordPress 执行传递和处理数据的过程中，在针对这些数据做出某些动作之前的特定点运行(例如将数据写入数据库或将其传递到浏览器页面)。WordPress 默认已经做了一些过滤钩子，你的插件可以添加它自己的过滤钩子。</p><p>本质上，过滤器就是在 WordPress 输出之前将你的浏览数据做出反应。过滤钩子是 WordPress 的两种钩子之一，另外一个我们叫做动作钩子（actions）。当然这不是我们这篇文章讨论的。</p><h2 id="在-WordPress-中使用过滤钩子"><a href="#在-WordPress-中使用过滤钩子" class="headerlink" title="在 WordPress 中使用过滤钩子"></a>在 WordPress 中使用过滤钩子</h2><p>正如我说的那样，使用 WordPress 过滤钩子是非常容易的，我们只需要了解一些过滤钩子的最基本的功能。（说实在点，最困难的部分其实是学习所有的过滤钩子，但是正如你想的那样，你一次性不可能学习每一个过滤钩子——当你需要哪个过滤钩子的时候，再学习它。）</p><p>在这部分，我们要做如下四件事：</p><ul><li>创建一个过滤函数</li><li>挂载到一个过滤钩子</li><li>从过滤钩子上移除一个函数</li><li>创建自己的过滤钩子</li></ul><p>创建一个过滤函数，并且钩到过滤钩子<br>为了在过滤器之间传输数据，你需要创建一个函数，用来定义如何传递这个数据以及用过滤钩子将其连接起来。</p><p>我们来看看，我们创建一个插件用来移除文章标题的元音（vowels），你不能说“从我的文章标题里面移除元音”你应当说“挂载这个函数（用来移除元音的）到我文章标题的过滤钩子”</p><p>这就完了？当然没有，看下面这个例子，我们将撰写函数代码来从任何东西上面移除元音<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    function remove_the_vowels($title ) &#123;</span><br><span class="line">        $title = preg_replace(&apos;/[aeiou]/i&apos;,&apos;&apos;, $title);</span><br><span class="line">        return $title;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>这个函数获取 $title 字符串，移除元音后返回它。 够简单吧？现在我们继续深入这个例子，我们将其用钩子连接到过滤器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    function remove_the_vowels( $title ) &#123;</span><br><span class="line">        $title = preg_replace( &apos;/[aeiou]/i&apos;, &apos;&apos;, $title );</span><br><span class="line">        return $title;</span><br><span class="line">    &#125;</span><br><span class="line">    add_filter( &apos;the_title&apos;, &apos;remove_the_vowels&apos; );</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>注意到新的函数没有？我们快速的看看这个 add_filter()：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    add_filter( $tag, $function_to_add, $priority, $accepted_args );</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><ul><li>$tag (required) - 过滤钩子的名称</li><li>$function_to_add (必须) - 要挂载到过滤钩子的函数名称</li><li>$priority (可选) -一个整数用来判断我们的函数什么时候执行，默认数值是10：这个数值你可以设置较高，也可以设置较低。数值的高低决定函数运行的优先级，数值越低优先级越高</li><li>$accepted_args (可选) – 一个整数用来设定过滤钩子接受的参数的个数，默认值是1</li></ul><h2 id="移除一个过滤钩子"><a href="#移除一个过滤钩子" class="headerlink" title="移除一个过滤钩子"></a>移除一个过滤钩子</h2><p>我们也可以从过滤钩子上面移除附加的函数，为了演示这个，我们用一个很简单的函数， remove_filter(). 我们来看看他是如何工作的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php remove_filter( $tag, $function_to_remove, $priority ); ?&gt;</span><br></pre></td></tr></table></figure></p><p>和 add_filter() 的参数几乎是相同的：</p><ul><li>$tag (必须) – 过滤钩子的名称</li><li>$function_to_remove (必须) – 要移除的函数的名称</li><li>$priority (可选) – 函数的优先级（根据定义函数的顺序）</li></ul><p>另外还有一个叫 remove_all_filters() 的函数，他有两个参数，分别是 $tag 和 $priority 用来设定过滤钩子的名称以及过滤钩子的优先级。remove_all_filters() 函数就像他的名字那样，它可以移除所有过滤钩子上面的函数。</p><h2 id="创建你自己的过滤钩子"><a href="#创建你自己的过滤钩子" class="headerlink" title="创建你自己的过滤钩子"></a>创建你自己的过滤钩子</h2><p>你还在疑虑这些过滤钩子是如何创建的？这里有一个特别的函数叫 apply_filters()，它在核心代码中被用来创建了几百个过滤钩子了。当然，它也可以用在核心代码之外，这就意味着我们可以在插件和主题里面也能创建过滤钩子。</p><p>来看看它是如何工作的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php apply_filters( $tag, $value, $var1, $var2 /* ...and so on */ ); ?&gt;</span><br></pre></td></tr></table></figure></p><ul><li>$tag (必须) – 过滤钩子的名称</li><li>$value (必须) – 通过add_filter()挂载的过滤函数所要修改的值。</li><li>$var1, $var2 and so on (任意) – 你的过滤钩子的参数（你喜欢设多少就多少），过滤函数可以使用这些参数，但是它们不能被函数返回。</li></ul><p>我们考虑一下这样一个例子：想象一下你写了一个函数，这个函数只返回一句皮特格里芬的名言：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php function peter_griffin_quote() &#123;    $quote = &quot;The bird is the word.&quot;;    return $quote;&#125; ?&gt;</span><br></pre></td></tr></table></figure></p><p>如果你想让人们过滤这句话（将你的插件代码放在一边），你需要向下面那样使用<br>apply_filters() 这个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    function peter_griffin_quote() &#123;</span><br><span class="line">        $quote = &quot;The bird is the word.&quot;; </span><br><span class="line">        return apply_filters( &apos;peter_griffin_quote&apos;, $quote );</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>那样，其他开发者使用你的插件可以这样修改你的函数数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    function change_the_quote( $quote ) &#123;</span><br><span class="line">        $quote = str_replace( &apos;bird&apos;, &apos;nerd&apos;, $quote );</span><br><span class="line">        return $quote;</span><br><span class="line">    &#125;</span><br><span class="line">    add_filter( &apos;peter_griffin_quote&apos;, &apos;change_the_quote&apos; );</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>现在，每当这个 peter_griffin_quote() 函数运行的时候，开发者不需要编辑你的插件文件，皮特的名言也会有很小的改变。</p><p>如果你需要额外的关于 WordPress 过滤钩子的信息，你可以参考 Pippin Williamson 的这个教程: Writing Extensible Plugins With Actions and Filters。在这个教程里面，你可以学到如何在你的插件或者主题中创建过滤钩子和动作钩子。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>你用过滤钩子用的越多，你就会感觉到越有趣。WordPress 有几百个过滤钩子，学习这些过滤钩子，你将会成为 WordPress方面的专家，在下一部分，我们将要学习下面这十个 WordPress 过滤钩子：</p><ul><li>login_errors</li><li>comment_post_redirect</li><li>allowed_redirect_hosts</li><li>body_class</li><li>locale</li><li>sanitize_user</li><li>the_content</li><li>the_password_form</li><li>the_terms</li><li>wp_mail_from</li></ul><p>原文链接：<a href="https://cloud.tencent.com/developer/article/1962605" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1962605</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;WordPress 过滤钩子（filters）——我们可以扩展 WordPress 的最好方法之一。这个特性的基础就是钩子（hooks）—— WordPress的过滤（filters）和动作（actions）钩子。没有它们，我们就无法利用 WordPress 的可扩展性的优
      
    
    </summary>
    
      <category term="WordPress" scheme="http://yoursite.com/categories/WordPress/"/>
    
    
      <category term="Filter" scheme="http://yoursite.com/tags/Filter/"/>
    
      <category term="WordPress" scheme="http://yoursite.com/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler证书清除并重新配置</title>
    <link href="http://yoursite.com/2022/01/21/fiddler-certificates-clean/"/>
    <id>http://yoursite.com/2022/01/21/fiddler-certificates-clean/</id>
    <published>2022-01-21T04:55:15.350Z</published>
    <updated>2022-01-21T04:55:15.409Z</updated>
    
    <content type="html"><![CDATA[<p>很多使用fiddler抓包，对于http来说不需太多纠结，随便设置下就能用，但是抓取https就死活抓不了，出现诸如以下问题：</p><p>creation of the root certificate was not successful;</p><p>Failed to find the root certificate in User Root List;</p><p>The Root certificate could not be found;</p><p>The root certificate could not be located;</p><p>Fiddler 抓取https 显示 Tunnel to … 443;</p><p>等等…</p><p>1.(最关键).清除C:\Users\用户\AppData\Roaming\Microsoft\Crypto\RSA 目录下所有文件（首次安装fiddler请忽略）</p><p>2.清除电脑上的根证书，WIN+R快捷键，输入：certmgr.msc， 然后回车，查找所有fiddler证书（菜单栏–操作–查找证书），然后删除。（首次安装fiddler请忽略）</p><p>3.清除浏览器上的证书文件 ,此处需要仔细查找带有FiddlerRoot的字样，并删除，以谷歌浏览器为例说明，在浏览器上输入: chrome://settings/，（首次安装fiddler请忽略）</p><p>4.打开fiddler，点击工具栏中的Tools—&gt;Options，点击Actions,选择最后一项，Reset All certificates,然后关闭</p><p>原文链接：<a href="https://blog.csdn.net/w6082819920919/article/details/112174650" target="_blank" rel="noopener">https://blog.csdn.net/w6082819920919/article/details/112174650</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多使用fiddler抓包，对于http来说不需太多纠结，随便设置下就能用，但是抓取https就死活抓不了，出现诸如以下问题：&lt;/p&gt;
&lt;p&gt;creation of the root certificate was not successful;&lt;/p&gt;
&lt;p&gt;Failed
      
    
    </summary>
    
      <category term="APP抓包" scheme="http://yoursite.com/categories/APP%E6%8A%93%E5%8C%85/"/>
    
    
      <category term="fiddler" scheme="http://yoursite.com/tags/fiddler/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>安卓APP安全证书验证分类</title>
    <link href="http://yoursite.com/2021/04/22/android-app-https-ca/"/>
    <id>http://yoursite.com/2021/04/22/android-app-https-ca/</id>
    <published>2021-04-22T07:38:11.583Z</published>
    <updated>2021-04-22T07:38:13.977Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ca.png" alt="安卓APP安全证书验证分类" title="安卓APP安全证书验证分类"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ca.png&quot; alt=&quot;安卓APP安全证书验证分类&quot; title=&quot;安卓APP安全证书验证分类&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="APP抓包" scheme="http://yoursite.com/categories/APP%E6%8A%93%E5%8C%85/"/>
    
    
  </entry>
  
  <entry>
    <title>Android7.0以上版本抓取https包问题</title>
    <link href="http://yoursite.com/2021/04/22/android-app-https/"/>
    <id>http://yoursite.com/2021/04/22/android-app-https/</id>
    <published>2021-04-22T07:14:54.253Z</published>
    <updated>2022-01-21T04:54:14.810Z</updated>
    
    <content type="html"><![CDATA[<p>Android7以后，系统不再信任用户级的证书，只信任系统级的证书，所以要抓包就需要把我们的代理程序证书安装至Android的系统目录中</p><ol><li><strong>证书生成</strong><br>将Filddler或者其他抓包程序的证书导出，一般为xxx.cer或者xxx.pem</li></ol><p>证书转换，已经是pem格式的证书不需要执行这一步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform DER -in xxx.cer -out cacert.pem</span><br></pre></td></tr></table></figure></p><ol start="2"><li><strong>对pem证书进行重命名</strong></li></ol><p>openssl版本在1.0以上的版本的执行这一句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform PEM -subject_hash_old -in cacert.pem</span><br></pre></td></tr></table></figure></p><p>openssl版本在1.0以下的版本的执行这一句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform PEM -subject_hash -in cacert.pem</span><br></pre></td></tr></table></figure></p><p>将输出的类似269953fb的值进行复制, 使用上面复制的值（类似于269953fb）对pem证书进行重命名,重命名为： 269953fb.0，切记不要忘记”.0”</p><ol start="3"><li><strong>将新证书放入手机系统证书目录，然后重启Android设备以生效</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adb push 269953fb.0 /sdcard/tmp/269953fb.0</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line">mount -o rw,remount /system #挂载system分区</span><br><span class="line">mv /sdcard/tmp/269953fb.0 /system/etc/security/cacerts/269953fb.0</span><br><span class="line">cd /system/etc/security/cacerts/</span><br><span class="line">chmod 644 269953fb.0</span><br><span class="line">chown root.root 269953fb.0</span><br><span class="line">reboot  #重启手机</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android7以后，系统不再信任用户级的证书，只信任系统级的证书，所以要抓包就需要把我们的代理程序证书安装至Android的系统目录中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;证书生成&lt;/strong&gt;&lt;br&gt;将Filddler或者其他抓包程序的证书导出，一般为xxx.
      
    
    </summary>
    
      <category term="APP抓包" scheme="http://yoursite.com/categories/APP%E6%8A%93%E5%8C%85/"/>
    
    
      <category term="fiddler" scheme="http://yoursite.com/tags/fiddler/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Django灵活使用csrf</title>
    <link href="http://yoursite.com/2021/04/22/django-csrf/"/>
    <id>http://yoursite.com/2021/04/22/django-csrf/</id>
    <published>2021-04-22T06:59:01.051Z</published>
    <updated>2021-04-22T07:08:17.654Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>基本使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">form表单中添加</span><br><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>全站禁用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br></pre></td></tr></table></figure></li><li><p><strong>局部禁用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&apos;django.middleware.csrf.CsrfViewMiddleware&apos;,# 不注释</span><br><span class="line"></span><br><span class="line">from django.views.decorators.csrf import csrf_exempt</span><br><span class="line"></span><br><span class="line">@csrf_exempt</span><br><span class="line">def csrf1(request):</span><br><span class="line"></span><br><span class="line">    if request.method == &apos;GET&apos;:</span><br><span class="line">        return render(request,&apos;csrf1.html&apos;)</span><br><span class="line">    else:</span><br><span class="line">        return HttpResponse(&apos;ok&apos;)</span><br></pre></td></tr></table></figure></li><li><p><strong>局部使用</strong></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># &apos;django.middleware.csrf.CsrfViewMiddleware&apos;, # 需要注释这一句话</span><br><span class="line"></span><br><span class="line">from django.views.decorators.csrf import csrf_exempt,csrf_protect</span><br><span class="line"></span><br><span class="line">@csrf_protect</span><br><span class="line">def csrf1(request):</span><br><span class="line"></span><br><span class="line">    if request.method == &apos;GET&apos;:</span><br><span class="line">        return render(request,&apos;csrf1.html&apos;)</span><br><span class="line">    else:</span><br><span class="line">        return HttpResponse(&apos;ok&apos;)</span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>CBV模式局部禁用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line">from django.views.decorators.csrf import csrf_exempt, csrf_protect</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line">from django.views import View</span><br><span class="line">class Cs(View):</span><br><span class="line">    # @method_decorator(csrf_exempt) 建议用这个，具体原因后续再讲</span><br><span class="line">    @csrf_exempt</span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&apos;GET，响应内容&apos;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&apos;Post，响应内容&apos;)</span><br></pre></td></tr></table></figure></li><li><p><strong>CBV 局部使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line">from django.views.decorators.csrf import csrf_exempt, csrf_protect</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line">from django.views import View</span><br><span class="line">class Cs(View):</span><br><span class="line">    # @method_decorator(csrf_exempt) 建议用这个，具体原因后续再讲</span><br><span class="line">    @csrf_exempt</span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&apos;GET，响应内容&apos;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&apos;Post，响应内容&apos;)</span><br></pre></td></tr></table></figure></li><li><p><strong>关于method_decorator的使用</strong></p></li></ol><p>Converts a function decorator into a method decorator. It can be used to decorate methods or classes; in the latter case, name is the name of the method to be decorated and is required.<br>name这个参数是必备的，是为了装饰类中的get方法还是post方法。。。等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line">def test(func):  # 装饰器</span><br><span class="line">    def inner(*args, **kwargs):</span><br><span class="line">        print(&apos;hello,23232323&apos;)</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@method_decorator(test, name=&apos;get&apos;)</span><br><span class="line">class Cs(View):</span><br><span class="line">    # @method_decorator(csrf_exempt)</span><br><span class="line">    # @method_decorator(csrf_protect)</span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&apos;GET，响应内容&apos;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&apos;Post，响应内容&apos;)</span><br></pre></td></tr></table></figure><p>作者：不_一<br>链接：<a href="https://www.jianshu.com/p/f69b241e0894" target="_blank" rel="noopener">https://www.jianshu.com/p/f69b241e0894</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基本使用&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx设置虚拟目录alias</title>
    <link href="http://yoursite.com/2021/04/22/nginx-alias/"/>
    <id>http://yoursite.com/2021/04/22/nginx-alias/</id>
    <published>2021-04-22T06:31:29.524Z</published>
    <updated>2021-04-22T06:48:04.774Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /random_img/ &#123;</span><br><span class="line">    alias /home/random_img/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>python3.8.6安装时提示Detected Windows 7 SP1 without KB2533623</title>
    <link href="http://yoursite.com/2021/03/23/python-install-erro/"/>
    <id>http://yoursite.com/2021/03/23/python-install-erro/</id>
    <published>2021-03-23T06:33:00.670Z</published>
    <updated>2021-03-23T06:35:22.797Z</updated>
    
    <content type="html"><![CDATA[<p>下载的安装包，双击安装时，提示安装失败，经过界面中的提示，打开日志后，最后一行提示：Detected Windows 7 SP1 without KB2533623<br>解决办法：<br>需要更新安装win7系统的KB2533623，我的是64位操作系统<br>下载地址：<a href="https://zhailiangs.github.io/download/Windows6.1--KB2533623-x64.msu" target="_blank" rel="noopener">https://zhailiangs.github.io/download/Windows6.1--KB2533623-x64.msu</a><br>百度网盘：<br>链接: <a href="https://pan.baidu.com/s/1bDNwJCjo9DDSANOPsU1ztA" target="_blank" rel="noopener">https://pan.baidu.com/s/1bDNwJCjo9DDSANOPsU1ztA</a> 提取码: wdqs 复制这段内容后打开百度网盘手机App，操作更方便哦<br>下载完成后，安装重启电脑即可。<br>————————————————<br>版权声明：本文为CSDN博主「雪诺颜」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/lxiaoqqin/article/details/106402866" target="_blank" rel="noopener">https://blog.csdn.net/lxiaoqqin/article/details/106402866</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下载的安装包，双击安装时，提示安装失败，经过界面中的提示，打开日志后，最后一行提示：Detected Windows 7 SP1 without KB2533623&lt;br&gt;解决办法：&lt;br&gt;需要更新安装win7系统的KB2533623，我的是64位操作系统&lt;br&gt;下载地址：
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>给python的pip设置代理</title>
    <link href="http://yoursite.com/2021/03/23/python-pip-proxy/"/>
    <id>http://yoursite.com/2021/03/23/python-pip-proxy/</id>
    <published>2021-03-23T06:29:45.488Z</published>
    <updated>2021-03-23T06:31:17.206Z</updated>
    
    <content type="html"><![CDATA[<p>由于网络原因，访问国外的pip源超级慢，因此可以给pip设置代理或设置国内源提高速度</p><ul><li>Windows：</li></ul><ol><li>进入%APPDATA%目录，例如：C:\Users\用户名\AppData\Roaming</li><li>新建pip文件夹，如果有则跳过</li><li>新建pip.ini文件，设置pip源<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">proxy=http://127.0.0.1:1081</span><br></pre></td></tr></table></figure></li></ol><ul><li>Linux：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>用vi编辑pip.conf文件，内容与Windows下pip.ini文件的内容一样</p><p>原文链接:<a href="https://blog.csdn.net/weixin_42191996/article/details/102332805" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42191996/article/details/102332805</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于网络原因，访问国外的pip源超级慢，因此可以给pip设置代理或设置国内源提高速度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;进入%APPDATA%目录，例如：C:\Users\用户名\AppData\Roaming&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="pip" scheme="http://yoursite.com/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>同步/异步、并发/并行、线程/进程</title>
    <link href="http://yoursite.com/2020/06/03/async-concurrency-thread/"/>
    <id>http://yoursite.com/2020/06/03/async-concurrency-thread/</id>
    <published>2020-06-03T07:03:24.929Z</published>
    <updated>2020-06-03T07:24:24.372Z</updated>
    
    <content type="html"><![CDATA[<p>看完本文，你将明白以下基本的东西:</p><p>（1）并发（并发只是实现异步的手段之一）并不是没有阻塞的，依然有阻塞，相对的分析，并发依然有阻塞。<br>（2）怎么理解“事件循环”，某个线程一直在各个方法之间永不停歇的游走，遇到一个yield from 就悬挂起来，然后又走到另外一个方法，依次进行下去，知道事件循环所有的方法执行完毕。<br>（3）并发（异步）一定会比同步快吗？当然不是了，参见后面文章的实验。<br>（4）并发分为真并发、伪并发，并发与并行的区别在于“是否同时”<br>（5）异步是最终的目的，并发和并行都可以实现异步，线程是决定了是使用并发还是并行的手段。<br>（6）最好的实现方式当然是并行了，</p><p>首先介绍一些最基本的概念和核心思想。</p><h2 id="一、进程、线程"><a href="#一、进程、线程" class="headerlink" title="一、进程、线程"></a>一、进程、线程</h2><ol><li>进程（Process）:</li></ol><p>是Windows系统中的一个基本概念，它包含着一个运行程序所需要的资源。一个正在运行的应用程序在操作系统中被视为一个进程，进程可以包括一个或多个线程。线程是操作系统分配处理器时间的基本单元，在进程中可以有多个线程同时执行代码。进程之间是相对独立的，一个进程无法访问另一个进程的数据（除非利用分布式计算方式），一个进程运行的失败也不会影响其他进程的运行，Windows系统就是利用进程把工作划分为多个独立的区域的。进程可以理解为一个程序的基本边界。是应用程序的一个运行例程，是应用程序的一次动态执行过程。</p><ol start="2"><li>线程（Thread）:</li></ol><p>是进程中的基本执行单元，是操作系统分配CPU时间的基本单位，一个进程可以包含若干个线程，在进程入口执行的第一个线程被视为这个进程的主线程。在.NET应用程序中，都是以Main()方法作为入口的，当调用此方法时系统就会自动创建一个主线程。线程主要是由CPU寄存器、调用栈和线程本地存储器（Thread Local Storage，TLS）组成的。CPU寄存器主要记录当前所执行线程的状态，调用栈主要用于维护线程所调用到的内存与数据，TLS主要用于存放线程的状态信息。</p><p>线程的本质:线程不是一个计算机硬件的功能，而是操作系统提供的一种逻辑功能，线程本质上是进程中一段并发运行的代码，所以线程需要操作系统投入CPU资源来运行和调度。</p><ol start="3"><li>进程和线程的区别</li></ol><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p><p> 1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程.</p><p> 2) 线程的划分尺度小于进程，使得多线程程序的并发性高。</p><p> 3) 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p><p> 4) 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p><p> 5) 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p><h2 id="二、-同步（Sync）和异步（Async）"><a href="#二、-同步（Sync）和异步（Async）" class="headerlink" title="二、 同步（Sync）和异步（Async）"></a>二、 同步（Sync）和异步（Async）</h2><ol><li>同步:</li></ol><p>所谓同步，就是发出一个功能调用时，在没有得到结果之前，该调用就不返回或继续执行后续操作。</p><p>简单来说，同步就是必须一件一件事做，等前一件做完了才能做下一件事。</p><ol start="2"><li>异步:</li></ol><p>异步与同步相对，当一个异步过程调用发出后，调用者在没有得到结果之前，就可以继续执行后续操作。当这个调用完成后，一般通过状态、通知和回调来通知调用者。对于异步调用，调用的返回并不受调用者控制。</p><p>对于通知调用者的三种方式，具体如下:</p><p>状态</p><p>即监听被调用者的状态（轮询），调用者需要每隔一定时间检查一次，效率会很低。</p><p>通知</p><p>当被调用者执行完成后，发出通知告知调用者，无需消耗太多性能。</p><p>回调</p><p>与通知类似，当被调用者执行完成后，会调用调用者提供的回调函数。</p><ol start="3"><li>同步和异步的区别:</li></ol><p>总结来说，同步和异步的区别:请求发出后，是否需要等待结果，才能继续执行其他操作。</p><h2 id="三、阻塞和非阻塞"><a href="#三、阻塞和非阻塞" class="headerlink" title="三、阻塞和非阻塞"></a>三、阻塞和非阻塞</h2><p>阻塞和非阻塞这两个概念仅仅与等待消息通知时的状态有关。跟同步、异步没什么太大关系，也就是说阻塞与非阻塞主要是程序（线程）等待消息通知时的状态角度来说的。</p><p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.</p><p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。</p><p>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p><p>总结:同步执行一般都会有阻塞，但也有可能没阻塞；异步执行也有可能有阻塞，也可能没有阻塞。后面会讲到。</p><h2 id="四、并发并行"><a href="#四、并发并行" class="headerlink" title="四、并发并行"></a>四、并发并行</h2><p>并发:在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在处理机上运行。当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状态。.这种方式我们称之为并发(Concurrent)。</p><p>并行:当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)</p><p>并发和并行的区别:</p><p>（1）你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。因为在完成吃饭这件事情之前，打电话这件事你是完全没开始的，是一个一个来的）</p><p>（2）你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。因为吃饭和电话两件事情都处于启动状态，而不是一件事做完才启动另一件事，但是虽然几件事情都开始了，但因为是一个线程，还是一个一个交替去做的，这也是python协程的思想。</p><p>（3）你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。因为这是同时在进行多件事情，而不是交替执行。</p><p>怎么区别呢？区分它们最关键的点就是:是否是『同时』。</p><p>并发的关键是你有处理多个任务的能力，不一定要同时；但是并行的关键是你有同时处理多个任务的能力。</p><h2 id="五、关键概念的区分"><a href="#五、关键概念的区分" class="headerlink" title="五、关键概念的区分"></a>五、关键概念的区分</h2><ol><li><p>阻塞/非阻塞:关注的是程序在等待调用结果（消息，返回值）时的状态</p></li><li><p>同步/异步:关注的是消息通知的机制。即等到完全做完才通知，还是你先做你的，我先做我的 ，你做完了再来通知我就可以了。</p></li></ol><p>所谓同步，就是在发出一个*调用*时，在没有得到结果之前，该*调用*就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由*调用者*主动等待这个*调用*的结果。</p><p>而异步则是相反，*调用*在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在*调用*发出后，*被调用者*通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p><p>上面的两组概念是可以两两搭配的，即</p><ol start="3"><li>同步阻塞、同步非阻塞，异步阻塞、异步非阻塞。</li></ol><p>举个简单的例子来描述这四种情况，老张要做两件事，用水壶烧开水，看电视，两件事情即两个任务，两个函数。<br>同步阻塞:老张把水壶放到火上，就坐在那里等水开，开了之后我再去看电视。（同步阻塞）</p><p>同步非阻塞:老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）</p><p>老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀的噪音。</p><p>异步阻塞:老张把响水壶放到火上，然后就坐在旁边等着听那个烧开的提示音。（异步阻塞）</p><p>异步非阻塞:老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）</p><p>乍一看，这“同步阻塞、意不阻塞”似乎没有什么区别，但实际上是有区别的，所谓同步异步，指的是消息通知的机制。区别在哪里呢？</p><p>在这个例子中同步异步只是对于水壶而言。在使用普通水壶的时候，我要自己主动去观察水是不是烧开了，自己主动去获取烧开的这个结果，即所谓的同步；但是在响水壶的时候，我不需要再管水烧到什么程度了，因为只要水烧开了，那个滴滴的噪声就会通知我的，即所谓的异步。</p><p>他们的相同点是，在烧水的过程中，老王啥也没干，即“阻塞”。</p><ol start="4"><li>四种总结——同步/异步与阻塞/非阻塞</li></ol><p>同步阻塞形式:效率是最低的。拿上面的例子来说，在烧水的过程中，什么别的事都不做。</p><p>同步非阻塞形式:实际上是效率低下的。因为老王需要不断的在看电视与烧水之间来回跑动，看一下电视，又要去看一下水烧开没有，这样来回跑很多次，在程序中，程序需要在这两种不同的行为之间来回的切换，效率可想而知是低下的。</p><p>异步阻塞形式:异步操作是可以被阻塞住的，只不过它不是在处理消息时阻塞，而是在等待消息通知时被阻塞。这个效率其实跟同步阻塞差不多的。</p><p>异步非阻塞形式:效率更高。因为老王把水烧好之后就不用管了，可以安安心心去看电视，不用来回奔波看水烧开了没，因为水烧开了会有提示告诉他水烧好了，这样效率岂不是更高。</p><p>那有没有更好的办法？当然有，如果老王还有一个帮手老张，让老王自己看电视、同时老张去烧开水，这样岂不是更好？这就是所谓的并行。</p><ol start="5"><li>并发/并行、同步/异步、阻塞/非阻塞</li></ol><p>并发/并行:即能够开启多个任务，多个任务交替执行为并发，多个任务同时执行为并行</p><p>同步/异步:关注的是消息通知的机制，主动等候消息则为同步、被动听消息则为异步</p><p>阻塞/非阻塞:关注的是等候消息的过程中有没有干其他事。</p><p>总结:上面的几组概念，时刻穿插的，并没有完全的等价关系，所以经常有人说，异步就是非阻塞，同步就是阻塞，并发就是非阻塞、并行就是非阻塞，这些说法都是不完全准确地。</p><h2 id="六、最终结论概括"><a href="#六、最终结论概括" class="headerlink" title="六、最终结论概括"></a>六、最终结论概括</h2><p>并发和并行都是实现异步编程的思路，只有一个线程的并发，称之为“伪并发”；有多个线程的并发称之为“真并发”，真并发与并行是很接近的。</p><ol><li>异步操作的优缺点</li></ol><p>因为异步操作无须额外的线程负担（这里指的是单线程交替执行的“伪并发”），并且使用回调的方式进行处理，在设计良好的情况下，处理函数可以不必使用共享变量（即使无法完全不用，最起码可以减少共享变量的数量），减少了死锁的可能。当然异步操作也并非完美无暇。编写异步操作的复杂程度较高，程序主要使用回调方式进行处理，与普通人的思维方式有些 初入，而且难以调试。</p><ol start="2"><li>多线程的优缺点</li></ol><p>多线程的优点很明显，线程中的处理程序依然是顺序执行，符合普通人的思维习惯，所以编程简单。但是多线程的缺点也同样明显，线程的使用（滥用）会给系统带来上下文切换的额外负担。并且线程间的共享变量可能造成死锁的出现。</p><p>异步与多线程,从辩证关系上来看,异步和多线程并不时一个同等关系,（因为单线程也是可以实现异步的）异步是目的,多线程只是我们实现异步的一个手段.什么是异步:异步是当一个调用请求发送给被调用者,而调用者不用等待其结果的返回.实现异步可以采用多线程技术或则交给另外的进程来处理<br>————————————————<br>版权声明:本文为CSDN博主「LoveMIss-Y」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接:<a href="https://blog.csdn.net/qq_27825451/article/details/86162597" target="_blank" rel="noopener">https://blog.csdn.net/qq_27825451/article/details/86162597</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看完本文，你将明白以下基本的东西:&lt;/p&gt;
&lt;p&gt;（1）并发（并发只是实现异步的手段之一）并不是没有阻塞的，依然有阻塞，相对的分析，并发依然有阻塞。&lt;br&gt;（2）怎么理解“事件循环”，某个线程一直在各个方法之间永不停歇的游走，遇到一个yield from 就悬挂起来，然后又
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="协程" scheme="http://yoursite.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>利用Tor网络实现自动切换IP的爬虫</title>
    <link href="http://yoursite.com/2020/04/24/tor-spider/"/>
    <id>http://yoursite.com/2020/04/24/tor-spider/</id>
    <published>2020-04-24T08:45:06.696Z</published>
    <updated>2021-01-16T01:28:07.779Z</updated>
    
    <content type="html"><![CDATA[<p>当从网络上采集数据时经常会遇到IP被限制的情况，需要不停的更换IP。Tor拥有庞大的IP池，可以帮助我们实现IP切换。如果你的爬虫程序在linux环境下运行请参考<a href="https://zhuanlan.zhihu.com/p/24261906" target="_blank" rel="noopener">《基于Tor网络的多ip爬虫》</a>,下面只介绍windows环境下如何使用。</p><h2 id="安装-Tor-Browser"><a href="#安装-Tor-Browser" class="headerlink" title="安装 Tor Browser"></a>安装 Tor Browser</h2><p>下载地址：<a href="https://www.torproject.org/download/" target="_blank" rel="noopener">https://www.torproject.org/download/</a></p><p>安装过程中记住 Tor Browser 的安装路径，安装完成后找到tor.exe的位置，例如：D:\Browser\TorBrowser\Tor\tor.exe</p><h2 id="下载-Vidalia"><a href="#下载-Vidalia" class="headerlink" title="下载 Vidalia"></a>下载 Vidalia</h2><p>Vidalia的下载地址：<a href="https://people.torproject.org/~erinn/vidalia-standalone-bundles/" target="_blank" rel="noopener">https://people.torproject.org/~erinn/vidalia-standalone-bundles/</a> 下载该页面的最下面那个即可：vidalia-standalone-0.2.21-win32-1_zh-CN.exe，安装完成之后，以管理员权限运行Start Vidalia.exe，进行下面的设定：</p><p><img src="/images/tor-spider-1.png" alt="点击显示设定" title="点击显示设定"><br><img src="/images/tor-spider-2.png" alt="填写tor.exe的路径" title="填写tor.exe的路径"><br><img src="/images/tor-spider-3.png" alt="设置本地代理" title="设置本地代理"><br><img src="/images/tor-spider-4.png" alt="点击启动Tor" title="点击启动Tor"></p><p>如果你的爬虫程序支持设置socks5代理，把代理IP设置为127.0.0.1 端口设置为9050 就可以了<br>如果你的爬虫程序仅支持HTTP代理，则还需要进行下面的操作安装Polipo，将socks5代理转换为HTTP代理</p><h2 id="下载安装Polipo"><a href="#下载安装Polipo" class="headerlink" title="下载安装Polipo"></a>下载安装Polipo</h2><p>下载地址：<a href="http://www.pps.univ-paris-diderot.fr/~jch/software/files/polipo/" target="_blank" rel="noopener">http://www.pps.univ-paris-diderot.fr/~jch/software/files/polipo/</a></p><p>选择polipo-1.1.0-win32.zip，下载并解压，然后编辑解压后的文件config.sample，在文件的开头加上以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">socksParentProxy = &quot;localhost:9050&quot;</span><br><span class="line"></span><br><span class="line">socksProxyType = socks5</span><br><span class="line"></span><br><span class="line">diskCacheRoot = &quot;&quot;</span><br></pre></td></tr></table></figure></p><p>使用cmd命令运行该目录下的程序：polipo.exe -c config.sample</p><p><img src="/images/tor-spider-5.png" alt="使用cmd命令运行该目录下的程序" title="使用cmd命令运行该目录下的程序"></p><p>转换后的HTTP代理为127.0.0.1:8123</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>长时间无法连接Tor：<ul><li>检查用来连接Tor的代理是否可用</li><li>如果使用V2ray来连接Tor, 需要在V2ray的配置中关闭流量探测<br><img src="/images/tor-spider-6.png" alt="不要勾选开启流量探测" title="不要勾选开启流量探测"></li></ul></li><li>待补充</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当从网络上采集数据时经常会遇到IP被限制的情况，需要不停的更换IP。Tor拥有庞大的IP池，可以帮助我们实现IP切换。如果你的爬虫程序在linux环境下运行请参考&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24261906&quot; target=&quot;
      
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Tor" scheme="http://yoursite.com/tags/Tor/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hexo文章加密</title>
    <link href="http://yoursite.com/2020/04/16/article-password/"/>
    <id>http://yoursite.com/2020/04/16/article-password/</id>
    <published>2020-04-16T08:11:56.006Z</published>
    <updated>2020-04-16T08:17:24.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class="line">            if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class="line">                alert(&apos;密码错误！&apos;);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;打开themes-&amp;gt;next-&amp;gt;layout-&amp;gt;_partials-&amp;gt;head.swig文件,在以下位置插入这样一段
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>APScheduler中BlockingScheduler和BackgroundScheduler的区别</title>
    <link href="http://yoursite.com/2018/05/18/apscheduler-backgroundscheduler/"/>
    <id>http://yoursite.com/2018/05/18/apscheduler-backgroundscheduler/</id>
    <published>2018-05-18T10:07:53.000Z</published>
    <updated>2021-04-22T06:30:11.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>APScheduler是基于Quartz的一个Python定时任务框架，提供了基于日期、固定时间间隔以及crontab类型的任务，并且可以持久化任务。</p><p>这里简单列一下常用的若干调度器：</p><p>BlockingScheduler：仅可用在当前你的进程之内，与当前的进行共享计算资源<br>BackgroundScheduler:　在后台运行调度，不影响当前的系统计算运行<br>AsyncIOScheduler:　如果当前系统中使用了async module，则需要使用异步的调度器<br>GeventScheduler:　如果使用了gevent，则需要使用该调度<br>TornadoScheduler:　如果使用了Tornado, 则使用当前的调度器<br>TwistedScheduler:Twister应用的调度器<br>QtScheduler:　Qt的调度器</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>我在使用APScheduler过程中想使用BackgroundScheduler调度器，结果任务一直无法执行，后来换用BlockingScheduler，结果可以正常执行。</p><p>BackgroundScheduler调度器代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from datetime import datetime</span><br><span class="line">from apscheduler.schedulers.background import BackgroundScheduler</span><br><span class="line">from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore</span><br><span class="line">from apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line">def test(text):</span><br><span class="line">    date1 = datetime.now().strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)</span><br><span class="line">    f = open(&apos;log2.txt&apos;,&apos;a&apos;)</span><br><span class="line">    f.write(date1 + &apos;-&apos; * 10 + text + &apos;-&apos; * 10 + &apos;\n&apos;)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">jobstores = &#123;</span><br><span class="line">    &apos;default&apos;: SQLAlchemyJobStore(url=&apos;sqlite:///jobs.sqlite&apos;)</span><br><span class="line">&#125;</span><br><span class="line">executors = &#123;</span><br><span class="line">    &apos;default&apos;: ThreadPoolExecutor(20),</span><br><span class="line">    &apos;processpool&apos;: ProcessPoolExecutor(5)</span><br><span class="line">&#125;</span><br><span class="line">job_defaults = &#123;</span><br><span class="line">    &apos;coalesce&apos;: False,</span><br><span class="line">    &apos;max_instances&apos;: 3</span><br><span class="line">&#125;</span><br><span class="line">scheduler = BackgroundScheduler(jobstores=jobstores, executors=executors, job_defaults=job_defaults, timezone=&apos;Asia/Shanghai&apos;)</span><br><span class="line">scheduler.start()</span><br><span class="line">scheduler.add_job(test,&apos;date&apos;,run_date=&apos;2018-05-18 16:56:01&apos;,args=[&apos;my_test3&apos;],id=&apos;my_test4&apos;)</span><br></pre></td></tr></table></figure><p>BlockingScheduler调度器代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">import datetime</span><br><span class="line">from apscheduler.schedulers.blocking import BlockingScheduler</span><br><span class="line">from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore</span><br><span class="line">from apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"># 使用sqlite存储作业</span><br><span class="line">sqlitedb = r&quot;sqlitedb.db&quot;</span><br><span class="line">url = r&apos;sqlite:///%s&apos; %sqlitedb</span><br><span class="line"></span><br><span class="line">def test(text):</span><br><span class="line">    print(datetime.datetime.now())</span><br><span class="line">    print(&apos;-&apos; * 10 + text + &apos;-&apos; * 10)</span><br><span class="line"></span><br><span class="line">jobstores = &#123;</span><br><span class="line">    &apos;default&apos;: SQLAlchemyJobStore(url=url)</span><br><span class="line">&#125;</span><br><span class="line">executors = &#123;</span><br><span class="line">    &apos;default&apos;: ThreadPoolExecutor(20),</span><br><span class="line">    &apos;processpool&apos;: ProcessPoolExecutor(5)</span><br><span class="line">&#125;</span><br><span class="line">job_defaults = &#123;</span><br><span class="line">    &apos;coalesce&apos;: False,</span><br><span class="line">    &apos;max_instances&apos;: 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sched = BlockingScheduler(jobstores=jobstores, executors=executors, job_defaults=job_defaults)</span><br><span class="line">sched.add_job(test,next_run_time= args=[&apos;my_test&apos;],id=&apos;my_test&apos;)</span><br><span class="line">sched.start()</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>BackgroundScheduler调度器依赖于python脚本的主进程，如果主进程不存在定时任务也就不存在，我的代码里面没有可以维持脚本运行的主进程所以无法执行定时任务</p><h2 id="正确示例代码"><a href="#正确示例代码" class="headerlink" title="正确示例代码"></a>正确示例代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line">from datetime import datetime</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">from apscheduler.schedulers.background import BackgroundScheduler</span><br><span class="line">from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore</span><br><span class="line">from apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line">def test(text):</span><br><span class="line">    date1 = datetime.now().strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)</span><br><span class="line">    f = open(&apos;log2.txt&apos;,&apos;a&apos;)</span><br><span class="line">    f.write(date1 + &apos;-&apos; * 10 + text + &apos;-&apos; * 10 + &apos;\n&apos;)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    jobstores = &#123;</span><br><span class="line">    &apos;default&apos;: SQLAlchemyJobStore(url=&apos;sqlite:///jobs.sqlite&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    executors = &#123;</span><br><span class="line">        &apos;default&apos;: ThreadPoolExecutor(20),</span><br><span class="line">        &apos;processpool&apos;: ProcessPoolExecutor(5)</span><br><span class="line">    &#125;</span><br><span class="line">    job_defaults = &#123;</span><br><span class="line">        &apos;coalesce&apos;: False,</span><br><span class="line">        &apos;max_instances&apos;: 3</span><br><span class="line">    &#125;</span><br><span class="line">    scheduler = BackgroundScheduler(jobstores=jobstores, executors=executors, job_defaults=job_defaults, timezone=&apos;Asia/Shanghai&apos;)</span><br><span class="line">    #scheduler.add_job(tick, &apos;interval&apos;, seconds=3)</span><br><span class="line">    scheduler.add_job(test,&apos;date&apos;,run_date=&apos;2018-05-18 17:12:01&apos;, args=[&apos;my_test5&apos;],id=&apos;my_test5&apos;)</span><br><span class="line">    scheduler.start()  #这里的调度任务是独立的一个线程</span><br><span class="line">    print(&apos;Press Ctrl+&#123;0&#125; to exit&apos;.format(&apos;Break&apos; if os.name == &apos;nt&apos; else &apos;C&apos;))</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        # This is here to simulate application activity (which keeps the main thread alive).</span><br><span class="line">        while True:</span><br><span class="line">            time.sleep(2)    #其他任务是独立的线程执行</span><br><span class="line">            print(&apos;sleep!&apos;)</span><br><span class="line">    except (KeyboardInterrupt, SystemExit):</span><br><span class="line">        # Not strictly necessary if daemonic mode is enabled but should be done if possible</span><br><span class="line">        scheduler.shutdown()</span><br><span class="line">        print(&apos;Exit The Job!&apos;)</span><br></pre></td></tr></table></figure><p>参考链接:  </p><p><a href="https://www.cnblogs.com/hushaojun/p/5189109.html" target="_blank" rel="noopener">https://www.cnblogs.com/hushaojun/p/5189109.html</a><br><a href="https://blog.csdn.net/blueheart20/article/details/70219490?locationNum=1&amp;fps=1](https://blog.csdn.net/blueheart20/article/details/70219490?locationNum=1&amp;fps=1)" target="_blank" rel="noopener">https://blog.csdn.net/blueheart20/article/details/70219490?locationNum=1&amp;fps=1](https://blog.csdn.net/blueheart20/article/details/70219490?locationNum=1&amp;fps=1)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;APScheduler是基于Quartz的一个Python定时任务框架，提供了基于日期、固定时间间隔以及crontab类型的任务，并且可以持
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="APScheduler" scheme="http://yoursite.com/tags/APScheduler/"/>
    
  </entry>
  
  <entry>
    <title>Centos显示tcp，udp的端口和进程等相关情况</title>
    <link href="http://yoursite.com/2018/05/18/centos-tcp-udp-show/"/>
    <id>http://yoursite.com/2018/05/18/centos-tcp-udp-show/</id>
    <published>2018-05-18T02:37:57.000Z</published>
    <updated>2018-05-21T02:35:08.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备<br>netstat命令的功能是显示网络连接、路由表和网络接口信息，可以让用户得知目前都有哪些网络连接正在运作。<br>该命令的一般格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">netstat [选项]</span><br><span class="line">    命令中各选项的含义如下：</span><br><span class="line">    -a 显示所有socket，包括正在监听的。</span><br><span class="line">    -c 每隔1秒就重新显示一遍，直到用户中断它。</span><br><span class="line">    -i 显示所有网络接口的信息，格式同“ifconfig -e”。</span><br><span class="line">    -n 以网络IP地址代替名称，显示出网络连接情形。</span><br><span class="line">    -r 显示核心路由表，格式同“route -e”。</span><br><span class="line">    -t 显示TCP协议的连接情况。</span><br><span class="line">    -u 显示UDP协议的连接情况。</span><br><span class="line">    -v 显示正在进行的工作。</span><br></pre></td></tr></table></figure><h2 id="netstat-tunlp"><a href="#netstat-tunlp" class="headerlink" title="netstat -tunlp"></a>netstat -tunlp</h2><p>用于显示tcp，udp的端口和进程等相关情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;netstat命令&quot;&gt;&lt;a href=&quot;#netstat命令&quot; class=&quot;headerlink&quot; title=&quot;netstat命令&quot;&gt;&lt;/a&gt;netstat命令&lt;/h2&gt;&lt;p&gt;netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>hexo文章属性冒号后面要加空格</title>
    <link href="http://yoursite.com/2018/05/12/article-title/"/>
    <id>http://yoursite.com/2018/05/12/article-title/</id>
    <published>2018-05-12T05:01:31.000Z</published>
    <updated>2018-05-21T02:33:46.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>刚开始使用hexo，生成静态文件老是报错，错误提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">can not read a block mapping entry; a multiline key may implicit key at line</span><br></pre></td></tr></table></figure></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>冒号后面加空格</p><p>错误写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tags:[hexo入门]</span><br><span class="line">categories:hexo</span><br></pre></td></tr></table></figure></p><p>正确写法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tags: [hexo入门]</span><br><span class="line">categories: hexo</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;刚开始使用hexo，生成静态文件老是报错，错误提示如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo入门" scheme="http://yoursite.com/tags/hexo%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/12/hello-world/"/>
    <id>http://yoursite.com/2018/05/12/hello-world/</id>
    <published>2018-05-12T04:47:25.320Z</published>
    <updated>2018-05-14T06:20:10.303Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
